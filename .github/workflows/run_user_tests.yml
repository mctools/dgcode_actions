name: 'run_user_tests'

on:
  workflow_dispatch:
    inputs:
      dgcode-branch:
        type: string
        description: Framework branch to use
        default: main
      setup-choice:
        type: choice
        description: Software setup(s) to use
        options: ['All',
          '{ "os": "ubuntu-20.04", "CC": "gcc-10", "CXX": "g++-10",  "python": "3.9",  "build-flag": "release" }',
          '{ "os": "ubuntu-20.04", "CC": "gcc-10", "CXX": "g++-10",  "python": "3.9",  "build-flag": "debug"   }',
          '{ "os": "ubuntu-20.04", "CC": "gcc-9",  "CXX": "g++-9",   "python": "3.8",  "build-flag": "release" }',
          '{ "os": "macos-11",     "CC": "clang",  "CXX": "clang++", "python": "3.10", "build-flag": "debug"   }']
      manual-debugging:
        type: boolean
        description: Launch manual debugging tmate session on failure
        default: false
      without-geant4:
        type: boolean
        description: Do not install Geant4
        default: false
      skip-tests:
        type: boolean
        description: Skip running the tests
        default: false

  schedule:
    - cron: '30 23 * * 0'  # 23:30 every Sunday

  workflow_call:
    inputs:
      dgcode-branch:
        description: Framework branch to use
        required: false
        type: string
        default: main

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    steps:
      - name: Setup matrix combinations
        id: setup-matrix-combinations
        run: |
          MATRIX='
          { "os": "ubuntu-20.04", "CC": "gcc-10", "CXX": "g++-10",  "python": "3.9",  "build-flag": "release" },
          { "os": "ubuntu-20.04", "CC": "gcc-10", "CXX": "g++-10",  "python": "3.9",  "build-flag": "debug"   },
          { "os": "ubuntu-20.04", "CC": "gcc-9",  "CXX": "g++-9",   "python": "3.8",  "build-flag": "release" },
          { "os": "macos-11",     "CC": "clang",  "CXX": "clang++", "python": "3.10", "build-flag": "debug"   }'

          MATRIX=$(if [[ '${{ inputs.setup-choice }}' == 'All' || '${{ inputs.setup-choice }}' == '' ]]; then echo $MATRIX; else echo '${{ inputs.setup-choice }}' ; fi)
          MATRIX=$(echo $MATRIX | tr '\n' ' ')
          echo "matrix-combinations={\"include\":[$MATRIX]}" >> $GITHUB_OUTPUT
    outputs:
      matrix-combinations: ${{ steps.setup-matrix-combinations.outputs.matrix-combinations }}

  user-tests:
    needs: setup-matrix
    name: ${{ matrix.os }}.${{ matrix.CC }}.python-${{ matrix.python }}.dgcode-${{ matrix.build-flag }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix-combinations) }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    env:
      SHELL: /bin/bash
      CC: ${{ matrix.CC }}
      CXX: ${{ matrix.CXX }}
      PROJECTS_DIR: projects
      EXTRA_PKG_DIR: dgcode_projects

    steps:
      - name: Checkout dgcode_actions
        uses: actions/checkout@v3
        with:
          repository: mctools/dgcode_actions

      - name: Checkout dgcode_projects
        uses: actions/checkout@v3
        with:
          repository: ess-dg/dgcode_projects
          path: './${{ env.EXTRA_PKG_DIR }}'

      - name: Setup and build framework
        id: setup-framework
        uses: ./.github/actions/setup
        with:
          PYTHON_VERSION: ${{ matrix.python }}
          PROJECTS_DIR: ${{ env.PROJECTS_DIR }}
          DGBUILD_FLAG: ${{ matrix.build-flag }}
          INSTALL_GEANT4: ${{ inputs.without-geant4 != true && (matrix.os !='ubuntu-22.04' && matrix.os != 'macos-12') }} #temp solution until Geant4 update
          DGCODE_BRANCH: ${{ inputs.dgcode-branch }}

      - name: Add user Projects repo to the extra pkg path
        run: echo "DGCODE_EXTRA_PKG_PATH=$GITHUB_WORKSPACE/${{ env.EXTRA_PKG_DIR }}" >> $GITHUB_ENV

      - name: Build user packages
        id: setup-user-packages
        if: steps.setup-framework.outcome == 'success'
        run: |
          . $GITHUB_WORKSPACE/dgdepfixerInstall/setup.sh
          . bootstrap.sh
          dgbuild -a --${{ matrix.build-flag }}
        working-directory: ${{ env.PROJECTS_DIR }}
        env:
          DGDEP_IGNOREBADSHEBANG: 1

      - name: Run tests
        id: run-tests
        if: inputs.skip-tests != true && steps.setup-user-packages.outcome == 'success'
        run: |
          . $GITHUB_WORKSPACE/dgdepfixerInstall/setup.sh
          . bootstrap.sh
          dgbuild -at --testexcerpts=100
        working-directory: ${{ env.PROJECTS_DIR }}
        env:
          DGDEP_IGNOREBADSHEBANG: 1

      - name: Setup tmate session for manual debugging
        uses: mxschmitt/action-tmate@v3
        if: always() && inputs.manual-debugging == true && (steps.setup-framework.outcome != 'success' || steps.setup-user-packages.outcome != 'success' || steps.run-tests.outcome != 'success')
        with:
          limit-access-to-actor: true

      - name: Rename test result
        id: rename-test-result
        if: inputs.skip-tests != true && steps.run-tests.outcome == 'success'
        run: mv $GITHUB_WORKSPACE/${{ env.PROJECTS_DIR }}/.bld/testresults/dgtest_results_junitformat.xml $GITHUB_WORKSPACE/${{ env.PROJECTS_DIR }}/.bld/testresults/dgtest_results_junitformat_${{ matrix.os }}.${{ matrix.CC }}.python-${{ matrix.python }}.dgcode-${{ matrix.build-flag }}.xml

      - uses: actions/upload-artifact@v3  # upload test results
        if: inputs.skip-tests != true && steps.rename-test-result.outcome == 'success'
        with:
          name: test-results-user-tests
          path: ${{ github.workspace }}/${{ env.PROJECTS_DIR }}/.bld/testresults/dgtest_results_junitformat_${{ matrix.os }}.${{ matrix.CC }}.python-${{ matrix.python }}.dgcode-${{ matrix.build-flag }}.xml

  report:
    name: Test reporting
    if: always() && inputs.skip-tests != true
    needs: user-tests
    runs-on: ubuntu-latest
    steps:

    - name: Download a single artifact
      uses: actions/download-artifact@v3
      with:
        name: test-results-user-tests
        path: artifact_dir
  
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v2
      if: always()
      with:
        check_name: User Tests Report
        junit_files: artifact_dir/dgtest_results_junitformat*.xml
        report_individual_runs: "true"
        comment_mode: "off" #control pull request comments
