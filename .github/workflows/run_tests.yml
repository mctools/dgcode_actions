name: 'run_tests'
run-name: ${{ github.event_name == 'workflow_dispatch' && format('pkgs{0} {1}, branch{0} {2}; fmwk branch{0} {3}', ':', inputs.pkg-repo, inputs.pkg-repo-branch, inputs.dgcode-branch ) || '' }}

on:
  workflow_dispatch:
    inputs:
      dgcode-branch:
        type: string
        description: Framework branch to use
        default: main
      pkg-repo:
        type: choice
        description: Package repository
        options: ['mctools/dgcode_val', 'ess-dg/dgcode_projects', 'dgcode/dgcode_private_projects']
        default: 'mctools/dgcode_val'
      pkg-repo-branch:
        type: string
        description: Package repository branch
        default: main
      setup-choice:
        type: choice
        description: Software setup(s) to use
        options: ['defaults', 'all',
          '{ "os": "ubuntu-18.04", "CC": "clang-9",  "CXX": "clang++-9",  "python": "3.7",  "build-flag": "debug"   }', 
          '{ "os": "ubuntu-18.04", "CC": "clang-9",  "CXX": "clang++-9",  "python": "3.6",  "build-flag": "debug"   }',
          '{ "os": "ubuntu-18.04", "CC": "gcc-7",    "CXX": "g++-7",      "python": "3.7",  "build-flag": "debug"   }',
          '{ "os": "ubuntu-18.04", "CC": "gcc-7",    "CXX": "g++-7",      "python": "3.7",  "build-flag": "release" }',
          '{ "os": "ubuntu-18.04", "CC": "gcc-7",    "CXX": "g++-7",      "python": "3.6",  "build-flag": "debug"   }',
          '{ "os": "ubuntu-18.04", "CC": "gcc-7",    "CXX": "g++-7",      "python": "3.6",  "build-flag": "release" }',
          '{ "os": "ubuntu-20.04", "CC": "gcc-10",   "CXX": "g++-10",     "python": "3.9",  "build-flag": "debug"   }',
          '{ "os": "ubuntu-20.04", "CC": "gcc-10",   "CXX": "g++-10",     "python": "3.9",  "build-flag": "release" }',
          '{ "os": "ubuntu-20.04", "CC": "gcc-10",   "CXX": "g++-10",     "python": "3.8",  "build-flag": "debug"   }',
          '{ "os": "ubuntu-20.04", "CC": "gcc-10",   "CXX": "g++-10",     "python": "3.8",  "build-flag": "release" }',
          '{ "os": "ubuntu-20.04", "CC": "gcc-9",    "CXX": "g++-9",      "python": "3.9",  "build-flag": "debug"   }',
          '{ "os": "ubuntu-20.04", "CC": "gcc-9",    "CXX": "g++-9",      "python": "3.9",  "build-flag": "release" }',
          '{ "os": "ubuntu-20.04", "CC": "gcc-9",    "CXX": "g++-9",      "python": "3.8",  "build-flag": "debug"   }',
          '{ "os": "ubuntu-20.04", "CC": "gcc-9",    "CXX": "g++-9",      "python": "3.8",  "build-flag": "release" }',
          '{ "os": "ubuntu-20.04", "CC": "clang-12", "CXX": "clang++-12", "python": "3.9",  "build-flag": "debug"   }',
          '{ "os": "ubuntu-20.04", "CC": "clang-12", "CXX": "clang++-12", "python": "3.9",  "build-flag": "release" }',
          '{ "os": "ubuntu-20.04", "CC": "clang-12", "CXX": "clang++-12", "python": "3.8",  "build-flag": "debug"   }',
          '{ "os": "ubuntu-20.04", "CC": "clang-12", "CXX": "clang++-12", "python": "3.8",  "build-flag": "release" }',
          '{ "os": "ubuntu-20.04", "CC": "clang-10", "CXX": "clang++-10", "python": "3.9",  "build-flag": "debug"   }',
          '{ "os": "ubuntu-20.04", "CC": "clang-10", "CXX": "clang++-10", "python": "3.9",  "build-flag": "release" }',
          '{ "os": "ubuntu-20.04", "CC": "clang-10", "CXX": "clang++-10", "python": "3.8",  "build-flag": "debug"   }',
          '{ "os": "ubuntu-20.04", "CC": "clang-10", "CXX": "clang++-10", "python": "3.8",  "build-flag": "release" }',
          '{ "os": "ubuntu-22.04", "CC": "clang-12", "CXX": "clang++-12", "python": "3.10", "build-flag": "debug"   }',
          '{ "os": "ubuntu-22.04", "CC": "clang-12", "CXX": "clang++-12", "python": "3.10", "build-flag": "release" }',
          '{ "os": "ubuntu-22.04", "CC": "clang-14", "CXX": "clang++-14", "python": "3.10", "build-flag": "debug"   }',
          '{ "os": "ubuntu-22.04", "CC": "clang-14", "CXX": "clang++-14", "python": "3.10", "build-flag": "release" }',
          '{ "os": "ubuntu-22.04", "CC": "gcc-9",   "CXX": "g++-9",       "python": "3.10", "build-flag": "debug"   }',
          '{ "os": "ubuntu-22.04", "CC": "gcc-9",   "CXX": "g++-9",       "python": "3.10", "build-flag": "release" }',
          '{ "os": "ubuntu-22.04", "CC": "gcc-11",  "CXX": "g++-11",      "python": "3.10", "build-flag": "debug"   }',
          '{ "os": "ubuntu-22.04", "CC": "gcc-11",  "CXX": "g++-11",      "python": "3.10", "build-flag": "release" }',
          '{ "os": "macos-11",     "CC": "clang",   "CXX": "clang++",     "python": "3.9",  "build-flag": "debug"   }',
          '{ "os": "macos-11",     "CC": "clang",   "CXX": "clang++",     "python": "3.9",  "build-flag": "release" }',
          '{ "os": "macos-11",     "CC": "clang",   "CXX": "clang++",     "python": "3.11", "build-flag": "debug"   }',
          '{ "os": "macos-11",     "CC": "clang",   "CXX": "clang++",     "python": "3.11", "build-flag": "release" }',
          '{ "os": "macos-12",     "CC": "clang",   "CXX": "clang++",     "python": "3.9",  "build-flag": "debug"   }',
          '{ "os": "macos-12",     "CC": "clang",   "CXX": "clang++",     "python": "3.9",  "build-flag": "release" }',
          '{ "os": "macos-12",     "CC": "clang",   "CXX": "clang++",     "python": "3.11", "build-flag": "debug"   }',
          '{ "os": "macos-12",     "CC": "clang",   "CXX": "clang++",     "python": "3.11", "build-flag": "release" }']
      include-filter-any:
        type: string
        description: Setup filter - include if it has ANY of the keywords (comma separated)
      include-filter-all:
        type: string
        description: Setup filter - include if it has ALL of the keywords (comma separated)
      exclude-filters-any:
        type: string
        description: Setup filter - exclude if it has ANY of the keywords (comma separated)
        default: ''
      manual-debugging:
        type: boolean
        description: Launch manual debugging tmate session on failure
        default: false
      without-geant4:
        type: boolean
        description: Do not install Geant4
        default: false
      skip-tests: 
        type: boolean
        description: Skip running the tests
        default: false

  schedule:
    - cron: '5 * * * *' # testing

  workflow_call:
    inputs:
      pkg-repo:
        description: Package repository
        required: false
        type: string
        default: 'mctools/dgcode_val'
      pkg-repo-branch:
        description: Package repository branch
        required: false
        type: string
        default: main
      dgcode-branch:
        description: Framework branch to use
        required: false
        type: string
        default: main
      setup-choice:
        description: Software setup(s) to use
        required: false
        type: string
        default: defaults
    secrets:
      PRIVATE_PROJ_REPO_URL:
        required: false #required for private repositories
      PRIVATE_PROJ_REPO_PAT:
        required: false #required for private repositories

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    steps:
      - name: Setup matrix combinations
        id: setup-matrix-combinations
        run: |
          MATRIX_DEFAULTS='
          { "os": "ubuntu-20.04", "CC": "gcc-10",   "CXX": "g++-10",     "python": "3.9",  "build-flag": "debug"   },
          { "os": "ubuntu-20.04", "CC": "gcc-10",   "CXX": "g++-10",     "python": "3.9",  "build-flag": "release" },
          { "os": "ubuntu-20.04", "CC": "gcc-9",    "CXX": "g++-9",      "python": "3.8",  "build-flag": "debug"   },
          { "os": "macos-11",     "CC": "clang",    "CXX": "clang++",    "python": "3.9",  "build-flag": "debug"   }'

          MATRIX_ALL='
          { "os": "ubuntu-18.04", "CC": "clang-9",  "CXX": "clang++-9",  "python": "3.7",  "build-flag": "debug"   },
          { "os": "ubuntu-18.04", "CC": "clang-9",  "CXX": "clang++-9",  "python": "3.6",  "build-flag": "debug"   },
          { "os": "ubuntu-18.04", "CC": "gcc-7",    "CXX": "g++-7",      "python": "3.7",  "build-flag": "debug"   },
          { "os": "ubuntu-18.04", "CC": "gcc-7",    "CXX": "g++-7",      "python": "3.7",  "build-flag": "release" },
          { "os": "ubuntu-18.04", "CC": "gcc-7",    "CXX": "g++-7",      "python": "3.6",  "build-flag": "debug"   },
          { "os": "ubuntu-18.04", "CC": "gcc-7",    "CXX": "g++-7",      "python": "3.6",  "build-flag": "release" },
          { "os": "ubuntu-20.04", "CC": "gcc-10",   "CXX": "g++-10",     "python": "3.9",  "build-flag": "debug"   },
          { "os": "ubuntu-20.04", "CC": "gcc-10",   "CXX": "g++-10",     "python": "3.9",  "build-flag": "release" },
          { "os": "ubuntu-20.04", "CC": "gcc-10",   "CXX": "g++-10",     "python": "3.8",  "build-flag": "debug"   },
          { "os": "ubuntu-20.04", "CC": "gcc-10",   "CXX": "g++-10",     "python": "3.8",  "build-flag": "release" },
          { "os": "ubuntu-20.04", "CC": "gcc-9",    "CXX": "g++-9",      "python": "3.9",  "build-flag": "debug"   },
          { "os": "ubuntu-20.04", "CC": "gcc-9",    "CXX": "g++-9",      "python": "3.9",  "build-flag": "release" },
          { "os": "ubuntu-20.04", "CC": "gcc-9",    "CXX": "g++-9",      "python": "3.8",  "build-flag": "debug"   },
          { "os": "ubuntu-20.04", "CC": "gcc-9",    "CXX": "g++-9",      "python": "3.8",  "build-flag": "release" },
          { "os": "ubuntu-20.04", "CC": "clang-12", "CXX": "clang++-12", "python": "3.9",  "build-flag": "debug"   },
          { "os": "ubuntu-20.04", "CC": "clang-12", "CXX": "clang++-12", "python": "3.9",  "build-flag": "release" },
          { "os": "ubuntu-20.04", "CC": "clang-12", "CXX": "clang++-12", "python": "3.8",  "build-flag": "debug"   },
          { "os": "ubuntu-20.04", "CC": "clang-12", "CXX": "clang++-12", "python": "3.8",  "build-flag": "release" },
          { "os": "ubuntu-20.04", "CC": "clang-10", "CXX": "clang++-10", "python": "3.9",  "build-flag": "debug"   },
          { "os": "ubuntu-20.04", "CC": "clang-10", "CXX": "clang++-10", "python": "3.9",  "build-flag": "release" },
          { "os": "ubuntu-20.04", "CC": "clang-10", "CXX": "clang++-10", "python": "3.8",  "build-flag": "debug"   },
          { "os": "ubuntu-20.04", "CC": "clang-10", "CXX": "clang++-10", "python": "3.8",  "build-flag": "release" },
          { "os": "ubuntu-22.04", "CC": "clang-12", "CXX": "clang++-12", "python": "3.10", "build-flag": "debug"   },
          { "os": "ubuntu-22.04", "CC": "clang-12", "CXX": "clang++-12", "python": "3.10", "build-flag": "release" },
          { "os": "ubuntu-22.04", "CC": "clang-14", "CXX": "clang++-14", "python": "3.10", "build-flag": "debug"   },
          { "os": "ubuntu-22.04", "CC": "clang-14", "CXX": "clang++-14", "python": "3.10", "build-flag": "release" },
          { "os": "ubuntu-22.04", "CC": "gcc-9",   "CXX": "g++-9",       "python": "3.10", "build-flag": "debug"   },
          { "os": "ubuntu-22.04", "CC": "gcc-9",   "CXX": "g++-9",       "python": "3.10", "build-flag": "release" },
          { "os": "ubuntu-22.04", "CC": "gcc-11",  "CXX": "g++-11",      "python": "3.10", "build-flag": "debug"   },
          { "os": "ubuntu-22.04", "CC": "gcc-11",  "CXX": "g++-11",      "python": "3.10", "build-flag": "release" },
          { "os": "macos-11",     "CC": "clang",   "CXX": "clang++",     "python": "3.9",  "build-flag": "debug"   },
          { "os": "macos-11",     "CC": "clang",   "CXX": "clang++",     "python": "3.9",  "build-flag": "release" },
          { "os": "macos-11",     "CC": "clang",   "CXX": "clang++",     "python": "3.11", "build-flag": "debug"   },
          { "os": "macos-11",     "CC": "clang",   "CXX": "clang++",     "python": "3.11", "build-flag": "release" },
          { "os": "macos-12",     "CC": "clang",   "CXX": "clang++",     "python": "3.9",  "build-flag": "debug"   },
          { "os": "macos-12",     "CC": "clang",   "CXX": "clang++",     "python": "3.9",  "build-flag": "release" },
          { "os": "macos-12",     "CC": "clang",   "CXX": "clang++",     "python": "3.11", "build-flag": "debug"   },
          { "os": "macos-12",     "CC": "clang",   "CXX": "clang++",     "python": "3.11", "build-flag": "release" }'

          if [[ '${{ inputs.setup-choice }}' == 'all' || ${{ github.event_name }} == 'schedule' ]]; then
            MATRIX=$MATRIX_ALL
          elif [[ '${{ inputs.setup-choice }}' == 'defaults' || '${{ inputs.setup-choice }}' == '' ]]; then
            MATRIX=$MATRIX_DEFAULTS
          else
            MATRIX='${{ inputs.setup-choice }}'
          fi
          echo "Matrix to start with: $MATRIX"

          MATRIX=$(python -c "print('\n'.join([l for l in '''$MATRIX'''.split('\n') if l and any([f.strip() in l for f in '${{ inputs.include-filter-any }}'.split(',')]) ]))")
          MATRIX=$(python -c "print('\n'.join([l for l in '''$MATRIX'''.split('\n') if l and all([f.strip() in l for f in '${{ inputs.include-filter-all }}'.split(',')]) ]))")
          EXCLUDE_FILTER_ANY=$(if [ '${{ inputs.exclude-filters-any }}' != '' ]; then echo '${{ inputs.exclude-filters-any }}' ; else echo 'do not exclude any' ; fi)
          MATRIX=$(python -c "print('\n'.join([l for l in '''$MATRIX'''.split('\n') if l and not any([f.strip() in l for f in '$EXCLUDE_FILTER_ANY'.split(',')]) ]))")

          MATRIX=$(echo $MATRIX | tr '\n' ' ')
          echo "matrix-combinations={\"include\":[$MATRIX]}" >> $GITHUB_OUTPUT
          echo "Final matrix: $MATRIX"
    outputs:
      matrix-combinations: ${{ steps.setup-matrix-combinations.outputs.matrix-combinations }}

  test:
    needs: setup-matrix
    name: ${{ matrix.os }}.${{ matrix.CC }}.python-${{ matrix.python }}.dgcode-${{ matrix.build-flag }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix-combinations) }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    env:
      SHELL: /bin/bash
      CC: ${{ matrix.CC }}
      CXX: ${{ matrix.CXX }}
      PROJECTS_DIR: projects
      EXTRA_PKG_DIR: dgcode_pkgs

    steps:
      - name: Set repository related defaults for schedule events
        run: |
          if [[ ${{ github.event_name }} == 'schedule' ]]; then
            echo "pkg_repo=mctools/dgcode_val" >> $GITHUB_ENV
            echo "pkg_repo_branch=main" >> $GITHUB_ENV
            echo "dgcode_branch=main" >> $GITHUB_ENV
          else
            echo "pkg_repo=${{ inputs.pkg-repo }}" >> $GITHUB_ENV
            echo "pkg_repo_branch=${{ inputs.pkg-repo-branch }}" >> $GITHUB_ENV
            echo "dgcode_branch=${{ inputs.dgcode-branch }}" >> $GITHUB_ENV
          fi

      - name: Checkout dgcode_actions
        uses: actions/checkout@v3
        with:
          repository: mctools/dgcode_actions

      - name: Checkout public packages repo (${{ env.pkg_repo }}/${{ env.pkg_repo_branch }})
        if: env.pkg_repo != 'dgcode/dgcode_private_projects'
        uses: actions/checkout@v3
        with:
          repository: ${{ env.pkg_repo }}
          ref: ${{ env.pkg_repo_branch }}
          path: './${{ env.EXTRA_PKG_DIR }}'

      - name: Checkout private packages repo (${{ env.pkg_repo }}/${{ env.pkg_repo_branch }})
        if: env.pkg_repo == 'dgcode/dgcode_private_projects'
        run: | 
          git clone https://oauth2:${{ secrets.PRIVATE_PROJ_REPO_PAT }}@${{ secrets.PRIVATE_PROJ_REPO_URL }} $GITHUB_WORKSPACE/${{ env.EXTRA_PKG_DIR }}
          cd $GITHUB_WORKSPACE/${{ env.EXTRA_PKG_DIR }}
          git checkout ${{ env.pkg_repo_branch }}

      - name: Setup and build framework (mctools/dgcode/${{ env.dgcode_branch }})
        id: setup-framework
        uses: ./.github/actions/setup
        with:
          PYTHON_VERSION: ${{ matrix.python }}
          PROJECTS_DIR: ${{ env.PROJECTS_DIR }}
          DGBUILD_FLAG: ${{ matrix.build-flag }}
          INSTALL_GEANT4: ${{ inputs.without-geant4 != true && (matrix.os !='ubuntu-22.04') }} #temp solution until Geant4 update
          DGCODE_BRANCH: ${{ env.dgcode_branch }}

      - name: Add package repo to the extra pkg path
        run: echo "DGCODE_EXTRA_PKG_PATH=$GITHUB_WORKSPACE/${{ env.EXTRA_PKG_DIR }}" >> $GITHUB_ENV

      - name: Build packages from ${{ env.pkg_repo }} 
        id: build-extra-packages
        if: steps.setup-framework.outcome == 'success'
        run: |
          . $GITHUB_WORKSPACE/dgdepfixerInstall/setup.sh
          . bootstrap.sh
          dgbuild -a --${{ matrix.build-flag }}
        working-directory: ${{ env.PROJECTS_DIR }}
        env:
          DGDEP_IGNOREBADSHEBANG: 1

      - name: Run tests
        id: run-tests
        if: inputs.skip-tests != true && steps.build-extra-packages.outcome == 'success'
        run: |
          . $GITHUB_WORKSPACE/dgdepfixerInstall/setup.sh
          . bootstrap.sh
          dgbuild -at --testexcerpts=100
        working-directory: ${{ env.PROJECTS_DIR }}
        env:
          DGDEP_IGNOREBADSHEBANG: 1

      - name: Setup tmate session for manual debugging
        uses: mxschmitt/action-tmate@v3
        if: always() && inputs.manual-debugging == true && (steps.setup-framework.outcome != 'success' || steps.build-extra-packages.outcome != 'success' || steps.run-tests.outcome != 'success')
        with:
          limit-access-to-actor: true

      - name: Rename test result
        id: rename-test-result
        if: inputs.skip-tests != true && steps.run-tests.outcome == 'success'
        run: mv $GITHUB_WORKSPACE/${{ env.PROJECTS_DIR }}/.bld/testresults/dgtest_results_junitformat.xml $GITHUB_WORKSPACE/${{ env.PROJECTS_DIR }}/.bld/testresults/dgtest_results_junitformat_${{ matrix.os }}.${{ matrix.CC }}.python-${{ matrix.python }}.dgcode-${{ matrix.build-flag }}.xml

      - uses: actions/upload-artifact@v3  # upload test results
        if: inputs.skip-tests != true && steps.rename-test-result.outcome == 'success'
        with:
          name: test-results
          path: ${{ github.workspace }}/${{ env.PROJECTS_DIR }}/.bld/testresults/dgtest_results_junitformat_${{ matrix.os }}.${{ matrix.CC }}.python-${{ matrix.python }}.dgcode-${{ matrix.build-flag }}.xml

  report:
    name: Test reporting
    if: always() && inputs.skip-tests != true
    needs: test
    runs-on: ubuntu-latest
    steps:

    - name: Download a single artifact
      uses: actions/download-artifact@v3
      with:
        name: test-results
        path: artifact_dir

    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v2
      if: always()
      with:
        check_name: Tests Report
        junit_files: artifact_dir/dgtest_results_junitformat*.xml
        report_individual_runs: "true"
        comment_mode: "off" #control pull request comments
