name: 'setup'
description: 'Setup environment for dgcode'
inputs:
  PROJECTS_DIR:
    description: Directory to build the framework in (must include a bootstrap script)
    required: true
    type: string
  PYTHON_VERSION:
    description: Python version to set up
    type: string
    default: '3.9'
  INSTALL_GEANT4:
    description: Install Geant4 optional dependency
    type: boolean
    default: true
  DO_DGBUILD:
    description: Option to turn off tailing dgbuild
    type: boolean
    default: true
  DGBUILD_FLAG:
    description: build flag (e.g. 'debug' or 'release')
    type: string
    default: examine
  DGCODE_BRANCH:
    description: DGCode (framework) branch to be used
    type: string
    default: main
  # PIP_PKGS:
  #   description: Pip packages to intsall
  #   type: string
  #   default: none

runs:
  using: "composite"
  steps:
    - name: Checkout dgcode framework
      uses: actions/checkout@v3
      with:
        repository: mctools/dgcode
        path: './dgcode_framework'
        ref: ${{ inputs.DGCODE_BRANCH }}

    # - name: Set up Python
    #   uses: actions/setup-python@v4
    #   with:
    #     python-version: ${{ inputs.PYTHON_VERSION }}

    - name: Setup Mambaforge
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniforge-variant: Mambaforge
        miniforge-version: latest
        activate-environment: dgcodeenviron
        use-mamba: true
        python-version: ${{ inputs.PYTHON_VERSION }}

    - name: Get Date
      id: get-date
      run: echo "today=$(/bin/date -u '+%Y%m%d')" >> $GITHUB_OUTPUT
      shell: bash

    - name: Cache Conda env
      id: cache
      uses: actions/cache@v3
      with:
        path: ${{ env.CONDA }}/envs
        key:
          conda-${{ runner.os }}--${{ runner.arch }}--${{ 
          inputs.PYTHON_VERSION }}--${{env.CC}}--${{
          steps.get-date.outputs.today }}-${{
          hashFiles('.github/scripts/conda-setup.yml') }}-${{ env.CACHE_NUMBER}}
      env:
        # Increase this value to reset cache if etc/example-environment.yml has not changed
        CACHE_NUMBER: 0

    - name: Update environment
      if: steps.cache.outputs.cache-hit != 'true'
      run:
        mamba env update -n dgcodeenviron -f .github/scripts/conda-setup.yml
      shell: bash -el {0}

    # - name: Cache conda
    #   uses: actions/cache@v2
    #   env:
    #     # Increase this value to reset cache if etc/example-environment.yml has not changed
    #     CACHE_NUMBER: 0
    #   with:
    #     path: ~/conda_pkgs_dir
    #     key:
    #       ${{ runner.os }}-${{ steps.os-version.outputs.version }}-${{env.CC}}-${{steps.python-version.outputs.version}}-conda-${{ env.CACHE_NUMBER }}-${{
    #       hashFiles('etc/example-environment.yml') }}

    # - name: Setup conda environment
    #   uses: conda-incubator/setup-miniconda@v2
    #   with:
    #     activate-environment: dgcodeenviron
    #     environment-file: .github/scripts/conda-setup.yml
    #     python-version: ${{ inputs.PYTHON_VERSION }}
    #     use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!
    #     # auto-activate-base: false

    - name: Conda list
      run: |
        conda info
        conda list
        python -V
        python3 -V
      shell: bash -el {0}

    # - name: Conda list after activate
    #   run: |
    #     conda activate dgcodeenviron
    #     conda info
    #     conda list
    #     python -V
    #     python3 -V
    #   shell: bash

    # - name: Get OS version for caches
    #   id: os-version
    #   uses: sersoft-gmbh/os-version-action@v2

    # - name: Get Python version for caches
    #   id: python-version
    #   run: echo "version=$(python3 -V | sed -e 's/ /-/g')" >> $GITHUB_OUTPUT
    #   shell: bash

    # - name: Install basic Prerequisites
    #   run: . $GITHUB_WORKSPACE/.github/scripts/instalPrerequisites.sh ${{ runner.os }}
    #   shell: bash

    # - name: Cache dgdepfixer install
    #   id: cache-dgdepfixer
    #   uses: actions/cache@v3
    #   with:
    #     path: dgdepfixerInstall
    #     key: ${{ runner.os }}-${{ steps.os-version.outputs.version }}-${{env.CC}}-${{steps.python-version.outputs.version}}-dgdepfixer-install-20221031

    # - name: Create dgdepfixer
    #   if: steps.cache-dgdepfixer.outputs.cache-hit != 'true'
    #   run: python3 $GITHUB_WORKSPACE/dgcode_framework/.system/depfix/src/__main__.py --create -d $GITHUB_WORKSPACE/dgdepfixerInstall
    #   env:
    #     DGDEP_IGNOREBADSHEBANG: 1
    #   shell: bash

    # - name: Install Geant4 action
    #   if: inputs.INSTALL_GEANT4 == 'true'
    #   id: install-geant4
    #   uses: ./.github/actions/installGeant4
    #   with:
    #     OS_VERSION: ${{ steps.os-version.outputs.version }}

    # - name: Pip install
    #   if: inputs.PIP_PKGS != 'none'
    #   id: pip-install
    #   run: |
    #     . $GITHUB_WORKSPACE/dgdepfixerInstall/setup.sh
    #     python3 -mpip install spglib gemmi ase pymatgen
    #   shell: bash

    - name: Pip install ptpython 
      run: python3 -mpip install ptpython==3.0.23
      shell: bash -el {0}

    - name: Build framework
      if: inputs.DO_DGBUILD == 'true'
      run: |
        # . $GITHUB_WORKSPACE/dgdepfixerInstall/setup.sh
        . bootstrap.sh
        # python3 -c "import matplotlib.pyplot"
        dgbuild -a --${{ inputs.DGBUILD_FLAG }}
      working-directory: ${{ inputs.PROJECTS_DIR }}
      env:
        DGDEP_IGNOREBADSHEBANG: 1
      shell: bash -el {0}
